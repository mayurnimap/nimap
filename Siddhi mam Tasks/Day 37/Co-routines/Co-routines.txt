
PROGRAMME
- whenever we want to run our programme there is a process 
- in that process there is execution of code 
- that execution of code contains thread
- each process can have one thread compulsory and it can have multiple threads

SEQUENTIAL EXECUTION
- in sequential execution , the instruction are execute step by step or we can say line by line
- suppose there are 4 instrctions then they will execute step by step but we know that second instrcution take more time and because of that third instrction is also 
  not going to execute as all the instruction are on same thread so to solve this problem we give separate thread to second instruction.
- one process can have multiple threads and we can assign separate tasks to each thread 
- for eg = in ms office when we type there are two threads running in which one is taking the typing input and second thread is checking the spelling mistake


IO OPERATIONS
- When we are taking data from api or sending data to api then that operations is called as IO operations.


======================================================================================================================================================

- suppose we are taking data from api and we have assign that work to separate thread so when there is delay in response from api then at that time thread will be of no use and it will be at the halt
 because thread will have no work between that time as we knoe thread will wait that when there are going to get the response from api and when thread is going to do their work so most of the time threads
 are in waiting state.
- so to encounter this problem, when the thread is in waiting state we can assign some other tasks to that thread
- and if response comes and our main thread is busy in some other task which we have assign then we can take one more thread from thread pool to continue that api work 


CO-ROUTINES
- when we transfer our thread to perform diffferet different tasks then that process is called as co-routines 
- Coroutines typically refer to a single-threaded programming paradigm where a single thread executes multiple tasks cooperatively. In other words,
  coroutines allow you to write code that can be paused and resumed, enabling the execution of multiple tasks within a single thread without the need for parallelism.
- so the above process is called as co-routines
- co-routines are executed inside the thread 
- co-routines are also called as co-operative functions 
- one thread can have multiple co-routines

 	

LOOPER 

What is Looper?
Looper is a class which is used to execute the Messages(Runnables) in a queue. Normal threads have no such queue, 
e.g. simple thread does not have any queue. It executes once and after method execution finishes, the thread will not run another Message(Runnable).

Where we can use Looper class?
If someone wants to execute multiple messages(Runnables) then he should use the Looper class which is responsible for creating a queue in the thread. 
For example, while writing an application that downloads files from the internet, we can use Looper class to put files to be downloaded in the queue.

How it works?
There is prepare() method to prepare the Looper. Then you can use loop() method to create a message loop in the current thread and now your Looper 
is ready to execute the requests in the queue until you quit the loop.

WHY WE SHOULD USED CO-ROUTINES
- as we can create a normal thread in java/kotlin and run a tasks on that particular thread but we can make limited quantity of thread in a particular programme and thread take 
  large amount of space because one thread takes approx 2mb of space..
- its depends on ur system that how much threads u can make 
- context  swtiching is also difficult in threads
- context swiching means one single thread we have used in the backround thread  and now we have to use that thread now in main thread so this process is called
  as context switching


NOTE : 1) there is no co-routines option in java 
            2) co-routines are just like lightweight threads but not threads
            3) co-routines runs on top of threads

================================================================================================================================================

TO IMPLEMENT CO-ROUTINES WE HAVE 

1) co-routines scope   = ( decides the lifetime of co-routine based on some components )
2) co-routines context = ( defines on which threads we r going to execute ) [ optional ]

Explanation  : so as we know co-routines runs indefinately so to give lifetime to it we have to used scope .. suppose of we have to stop our at certain time so using scope is mandatory.. there are many types of scopes
which have diffeent different lifetime ... such as global scope so it will run until the result get and it is generall not recommended


DISPATCHER

- it states that ...there  are some set of  threads ..only on this threads, launch/Execute your co-routines 

   PRE-DEFINED DISPATCHERS
 1) Dispatchers.IO  (to run the Io operation)
 2) Dispatchers.Main (if we have to launch our co-routine on main thread)
 3) Dispatchers.Default 

=============================================================================================================================================

SUSPEND KEYWORD

- co-routines helps to implement the functionality that can be suspended and later resume at specific points without blocking of the thread
- by prefixing the suspend keyword  with funtion/method helps the co-routine to suspend the computation at a particular point 
- suspending function can only be called with the help of co-routine 
- in suspend function we can use yield() function which says that there is some other operation such as IO going to execute after this 
 so u can do other tasks is there is any other co-routine which has to be execute on same thread

for example : suspend fun task1(){
                        log.d(start task1)
                        yield()
                        log.d(end task1) 
                     }

                      suspend fun task2(){
                        log.d(start task2)
                        yield()
                        log.d(end task2) 
                     }

                   fun main(){
                    
                    CoroutineScope(Dispatchers.Main).launch {
                    task1()
                    }

                   CoroutineScope(Dispatchers.Main).launch {
                    task2()
                    }
}


IMP NOTES : suspend works like if there is any work which does not  need thread then it look for the other co-routines of same thread .. suppose if we add delay(1000) in place of yield() then suspend function will automatically detect that
there is delay and it will look for the other co-routine ....and output will be the same.... 

OUTPUT :START TASK 1
                  START TASK 2
                  END TASK 1
                  END TASK 2




==========================================================================================================================================================================

CO - ROUTINE BUILDERS 

- CO - ROUTINE BUILDERS  are the function that helps in creating coroutines 
- as we can see in the code when we launch the coroutine using launch function so that function return the instance of job
- so we can save that instance into some variable and use that for accessing various properties of job class
- such as cancel which cancel our coroutine 
- such as join method  .. when as long as our co-routine is not completed it will keep the object in the waiting state without blocking the thread 
- but our co-routine will be in the suspended state
- in simple words. when we want our co-routine to be in a suspended state then we should use the join method 
- see code for better understanding 

usecase of builders 

1) Use Launch = when you do not care about the result 
2) Use Async  = when you expect result/output from your co-routine 

although both can be use to achieve the same functionality but it is better to use what best for what

=============================================================================================================================================================


Coutines hier-archy

- in this , child co-routines adapts and inherits the context of parent co-routines
- so we dont need to mention the explicitely context in child co-routine we can directly type launch and it will take all the parent context
- but if we want to run the co-routine on other threas such as our parent thread is dispatchers.main and child thread we want run o dispatchers.io then we can mention it explicitelt ..
- this is done only when we want to run on another thread if we wanr run on same thread then we dont to mention it explicitely 

for eg = private suspend fun printFollowers(){

         CoroutineScope(Dispatchers.IO).launch {
            var a = async { getFollowers() }  
            var b = async { getlikes() }
            Log.d(TAG,"followers-,${a.await()},likes - ${b.await()}")
        }
    } 

====================================================================================================================================================

for canceling the co-routine

- there is simple method cancel in which we can cancel our co-routine
- simple we have to saved the instance in some variable and then we can cancel our co-routine with that variable 
- but sometimes co-routines get confuse and even if we cancel the co-routine then also it will execute
- so for that we will use the inactive condition in that .. its works like if there active co-routine then only execute the task otherwise dont 

=============================================================================================================================================

with context and run blocking functions 

1) with context

- it is blocking call 
- in this it is compulsory to pass the context that dispatcher.io and others
- this function is used when we have to execute some statement line by line even if there is any delay in that statement
- it work is to block the co-routine because if we dont block co-routine then it will try to execute other statement because current statement is taking time
-The purpose of withContext is primarily to switch the coroutine's context (thread) temporarily for a specific block of code

Chat-Gpt Notes 



1) Blocking call: Yes, withContext is a suspending function that can cause its surrounding coroutine to temporarily block until the provided block of code within withContext completes execution.

2) Dispatcher requirement: It's not compulsory to pass a dispatcher to withContext, but it's a common use case. If you don't specify a dispatcher,
                                                  it inherits the dispatcher from the outer coroutine, so it may not always be necessary to explicitly provide one.

3) Sequential execution: withContext is often used when you need to switch to a different coroutine dispatcher to execute a block of code, but you want to maintain sequential execution.
                                             For example, you might switch to Dispatchers.IO to perform a blocking I/O operation without blocking the main thread.

4) Blocking coroutine: While withContext can potentially block the coroutine temporarily, it's essential to understand that it doesn't block the thread itself. Instead, it suspends the coroutine, 
                                         allowing other coroutines to execute on the same thread while the current coroutine is waiting.

5) Blocking vs. Suspending: It's important to distinguish between blocking and suspending. Blocking typically implies blocking a thread, potentially causing it to become unresponsive. 
                                                    Suspending, on the other hand, means pausing the coroutine without blocking the underlying thread, allowing other coroutines to continue execution.

6) Non-blocking alternatives: In scenarios where you want to avoid blocking altogether, you might consider using non-blocking alternatives like asynchronous programming with async and 
                                                    await, or reactive programming with libraries like Kotlin Flow or RxJava.

7) Cancellation handling: Like other suspending functions, withContext respects cancellation. If the coroutine is canceled while suspended in withContext, it will be canceled when it resumes execution.

CODE EXAMPLE  : 

private suspend fun executeTask()
{
   Log.d("Before")
   withContext(Dispatchers.IO) {
    delay(100)
    Log.d("inside")
    }
  Log.d("After)
}

- if we use normal co-routine and launch then output will be = before, after, inside
- if we use context function then outut will be = before, inside, after

======================================================================================================================================================


Run-blocking functions 

fun main()                                                
{                                                                 
   GlobalScope.launch{                         
    delay(1000)
    Log.d("World")
    }
   Log.d("Hello")
}

Output = Hello

-In Kotlin, when you launch a coroutine using GlobalScope.launch, it creates a coroutine that runs independently of the main program. 
 When the main function completes, the program exits, and any coroutines launched using GlobalScope are cancelled along with it.
- therefor we are getting only hello output coz after priting hello it will end the function and because of that co-routine also gets cancel
- to aoid this we use run blocking ..  as the name sugges it will block the main thread until all the co-routine gets compeleted... 
- simple it does allow our main thread to teminate until all the co-routines gets compeleted 
- here is the code to catch that 
  
  fun main() {
    runBlocking {
        GlobalScope.launch {
            delay(1000)
            Log.d("World")
        }
        Log.d("Hello")
    }
}

Output = hello world

====================================================================================================================

ViewModel Scope and LifeCycleScope 

1) LifeCycleScope - coroutine scope attach with lifecycle (fragement or activity)

2) ViewModel Scope - coroutine in this scope will be cancelled automatically when lifecycle is destroyed. we dont need to manually cancel the coroutines

LifecycleScope:

-LifecycleScope is a coroutine scope tied to the lifecycle of an Android component, such as an Activity or Fragment.
-Coroutines launched within lifecycleScope are automatically cancelled when the associated lifecycle is destroyed (e.g., when the Activity or Fragment is finished or detached).
-It's a convenient way to launch coroutines that need to be scoped to the lifecycle of a UI component, ensuring proper cleanup and avoiding memory leaks.

ViewModelScope

-ViewModelScope is a coroutine scope tied to the lifecycle of a ViewModel.
-It's available as an extension property (viewModelScope) of ViewModel.
-Coroutines launched within viewModelScope are automatically cancelled when the associated ViewModel is cleared (e.g., when the associated UI component is destroyed and its ViewModel is no longer needed).
-It's designed to simplify the management of coroutines within ViewModels, ensuring that any ongoing background tasks are properly cancelled to avoid memory leaks and resource waste.

===========================================================================================================================

- ViewModelFactory

-ViewModel factories are useful in various scenarios where you need to provide dependencies or parameters to ViewModel constructors

Use Cases:

1)
Dependency Injection: When a ViewModel requires dependencies such as a repository, database, or network client, you can use a ViewModel factory to inject these dependencies into the 
                                           ViewModel constructor.

2)
Custom Initialization: If a ViewModel requires some custom initialization logic or parameters based on runtime conditions, you can use a factory to provide these parameters to the ViewModel constructor.

3)
Configurable Behavior: ViewModel factories can be used to configure the behavior of ViewModels dynamically based on user preferences or other runtime conditions.

WORKING FLOW OF VIEW MODEL FACTORY

1) Factory Implementation: - Implement the ViewModelProvider.Factory interface to create your ViewModel factory. 
                                                  - Override the create method to instantiate the ViewModel with the required dependencies or parameters.

2) ViewModel Registration: - Make sure to register your ViewModel factory when retrieving ViewModel instances using ViewModelProvider.

3) Single Responsibility: - Keep your ViewModel factory focused on providing dependencies or parameters to ViewModel constructors. 
                                              - Avoid adding unnecessary logic or complex initialization code in the factory.

4) Clear Documentation: - Document the dependencies or parameters required by your ViewModel constructors and how they are provided by the factory. 
                                              - This helps improve code readability and maintainability.




reference link :
https://www.youtube.com/watch?v=Mi5DEm45XlM&list=PLRKyZvuMYSIN-P6oJDEu3zGLl5UQNvx9y
