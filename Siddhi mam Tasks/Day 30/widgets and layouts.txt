

Widgets in Android -

widgets" typically refer to the UI components you use to design the user interface of your Android application. 
These widgets are available in the "Palette" window of the Android Studio's Layout Editor.

1) TextView: Displays text on the screen.
2) EditText: Allows users to enter and edit text.
3) Button: Represents a clickable button.
4) ImageView: Displays images.
5) CheckBox: Allows users to select one or more options from a list of choices.
6) RadioButton: Represents a single selectable choice.
7) ToggleButton: Represents a two-state button.
8) Spinner: Displays a dropdown list of items.
9) SeekBar: Allows users to select a value from a range by sliding a thumb.
10) ProgressBar: Indicates the progress of an operation.

=============================================================================================

Layouts : 

In Android Studio, layouts are used to define the structure and appearance of the user interface (UI) in Android applications. 
There are several types of layouts available, each with its own characteristics and use cases. 


                                                                                                   LinearLayout
Definition: LinearLayout arranges its children elements either horizontally or vertically in a single direction.
Key Points:
- Supports both horizontal (android:orientation="horizontal") and vertical (android:orientation="vertical") orientations.
- Useful for simple UI designs where elements are arranged in a linear order.
- Supports weights to distribute space among children proportionally.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


                                                                                                   RelativeLayout:

Definition: RelativeLayout arranges its children elements relative to each other or to the parent.
Key Points:
-Allows positioning of child views relative to each other using attributes like android:layout_above, android:layout_below, etc.
-Useful for complex UI designs where the positioning of elements needs to be flexible.
-Supports aligning elements to parent edges or to each other.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                                   ConstraintLayout:

Definition: ConstraintLayout allows you to create large and complex layouts with a flat view hierarchy.
Key Points:
-Utilizes constraints to define the position and size of child views relative to other views and the parent.
-Offers flexibility in UI design while maintaining a flat view hierarchy for better performance.
-Introduced as a replacement for RelativeLayout due to its more powerful features and better performance.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                                   FrameLayout:

Definition: FrameLayout is designed to block out an area on the screen to display a single item.
Key Points:
Places each child element on top of the previous one, allowing only the last added child to be visible.
Typically used for simple UI elements such as fragments or image overlays.
Often used as a container for fragments or to create layered UI designs.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                                   GridLayout:

Definition: GridLayout arranges its children elements in a grid-like structure with rows and columns.
Key Points:
-Allows defining the number of rows and columns in the grid and placing children elements in specific grid cells.
-Supports the use of layout_rowSpan and layout_columnSpan attributes to span multiple rows or columns.
-Useful for creating UIs with complex grids, such as forms or tables.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


                                                                                                   ConstraintSet:

Definition: ConstraintSet is not a layout itself but a companion class to ConstraintLayout that allows dynamically creating and applying constraints.
Key Points:
-Enables defining constraints programmatically rather than in XML layout files.
-Useful for creating dynamic UIs or applying constraints based on runtime conditions.
-Can be used in conjunction with ConstraintLayout to programmatically manipulate constraints.
-These are some of the common layout types in Android Studio, each offering unique features and 
advantages for designing the user interface of Android applications.
Choosing the appropriate layout type depends on the complexity of the UI design and the desired behavior of the app.

